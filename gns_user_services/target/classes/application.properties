## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
#spring.datasource.url = jdbc:mysql://mysql-dev-server:3306/gns_users?useSSL=false&allowPublicKeyRetrieval=true
#spring.datasource.url = jdbc:mysql://${DATABASE_HOST}/${DATABASE_NAME}
spring.datasource.url=jdbc:mysql://localhost:3306/gns
#spring.datasource.url=jdbc:mysql://host.docker.internal:3306/gns

spring.datasource.username = root
spring.datasource.password = Naresh@08

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

server.port=8080

spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

security.basic.enabled=false


spring.security.user.name = username
spring.security.user.password = password

gns.user.movies.service.base.url = http://localhost:8070/api/movies/

spring.kafka.consumer.bootstrap-servers = localhost:9092
spring.kafka.consumer.group-id= group_id
spring.kafka.consumer.auto-offset-reset = earliest
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer = org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.producer.bootstrap-servers = localhost:9092
spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer = org.apache.kafka.common.serialization.StringSerializer